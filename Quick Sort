//Quick sort
#include <iostream>
using namespace std;
void swap(long long int *a,long long int *b)
{
    long long int temp;
    temp=*a;
    *a=*b;
    *b=temp;
    return;
}
void print_array(long long int arr[],long long int low,long long int high)
{
    long long int i;
    for(i=low;i<=high;i++)
    {
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return;
}
long long int partition(long long int arr[],long long int low,long long int high)
{
    long long int pivot=arr[low],i=low,j=high;
    while(i<j)
    {
        while(arr[i]<=pivot)
        {
            i++;
        }
        while(arr[j]>pivot)
        {
            j--;
        }
        //This condition works until while loop is exhausted, i.e when 'i' is greater than 'j'
        if(i<j)
        {
            swap(&arr[i],&arr[j]);
        }
    }
    //Here pivot element is swapped with the position where 'j' index is exhausted
    swap(&arr[j],&arr[low]);
    //Here we are returning the position of the pivot
    return j;
}

void quick_sort(long long int arr[],long long int low,long long int high)
{
    if(low<high)
    {
        long long int pivot=partition(arr,low,high);
        quick_sort(arr,low,pivot-1);
        quick_sort(arr,pivot+1,high);
    }
    return;
}
int main()
{
    long long int n=0;
    cout<<"Enter the size of an array:"<<endl;
    cin>>n;
    long long int arr[n],i=0;
    cout<<"Enter the elements:"<<endl;
    for(i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    quick_sort(arr,0,n-1);
    print_array(arr,0,n-1);
    return 0;
}
