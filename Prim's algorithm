//Prims's algorithm to find minimum cost of the spanning tree
#include <iostream>
using namespace std;
int main()
{
    int n,i,j,no_of_edges=0,x=0,y=0,min_val=0;
    cout<<"Enter the number of vertices:"<<endl;
    cin>>n;
    cout<<"Enter the adjacency matrix:"<<endl;
    int arr[n][n],selected[n]={0};
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            cin>>arr[i][j];
        }
    }
    selected[0] = 1;
    cout<<"Edge         Weight"<<endl;
    while(no_of_edges<(n-1))
    {
        int min = 999;
        x=0,y=0;
        for(i=0;i<n;i++)
        {
            if(selected[i])
            {
            for(j=0;j<n;j++)
            {
                if(!selected[j] && arr[i][j])
                {
                    if(arr[i][j]<min)
                    {
                        min = arr[i][j];
                        x=i,y=j;
                    }
                }
            }
            }
        }
        min_val+=min;
        selected[y]=1;
        cout<<"("<<x<<"-"<<y<<")"<<"    :    "<<min<<endl;
        no_of_edges++;
    }
    cout<<"Minimum cost of the spanning tree is:"<<min_val<<endl;
    
}
   
